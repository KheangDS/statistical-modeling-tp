---
title: "TP 1"
format: html
editor: visual
---

---
title: "Statistical Models Exercise Answers"
subtitle: "Institute of Technology of Cambodia — I4STM"
author: "Student Name"
format: html
editor: visual
---

# SECTION 1: DATA VISUALIZATION

## Task 1: Galton Heredity

```{r}
 # Install and load dataset install.packages("HistData") library(HistData) data(Galton) Galton <- data.frame(Galton)
```

```{r}
# Load required libraries
library(ggplot2)
library(dplyr)
```

### (a). Contingency table between children and parents’ height

```{r}
table_Galton <- table(round(Galton$parent, 1), round(Galton$child, 1))
table_Galton
```

### (b) Scatter plot with regression line

```{r}
plot(Galton$parent, Galton$child,
main = "Scatter plot of Children Height vs Parents Average Height",
xlab = "Average Height of Parents (inch)",
ylab = "Height of Children (inch)",
pch = 19, col = "skyblue")
abline(lm(child ~ parent, data = Galton), col = "red", lwd = 2)
```

## Task 2: Munich Rent Index (1999)

```{r}
install.packages("gamlss.data")
library(gamlss.data)
library(dplyr)
data(rent99)
rent99 <- data.frame(rent99)
```

### (a) Histograms and Kernel Density Plots

```{r}
par(mfrow=c(2,2))
hist(rent99$rent, prob=TRUE, main="Net Rent", xlab="Net rent (€)", col="lightblue")
lines(density(rent99$rent), col="red", lwd=2)

hist(rent99$rentsqm, prob=TRUE, main="Net Rent per sqm", xlab="€", col="lightgreen")
lines(density(rent99$rentsqm), col="red", lwd=2)

hist(rent99$area, prob=TRUE, main="Area (sqm)", xlab="sqm", col="lightyellow")
lines(density(rent99$area), col="red", lwd=2)

hist(rent99$yearc, prob=TRUE, main="Year of Construction", xlab="Year", col="lightgray")
lines(density(rent99$yearc), col="red", lwd=2)

```

### (b) Scatter Plots

```{r}
par(mfrow=c(2,2))
plot(rent99$area, rent99$rent, main="Net Rent vs Area", xlab="Area (sqm)", ylab="Net Rent (€)", pch=19, col="blue")
plot(rent99$area, rent99$rentsqm, main="Rent per sqm vs Area", xlab="Area (sqm)", ylab="Rent/sqm (€)", pch=19, col="darkgreen")
plot(rent99$yearc, rent99$rent, main="Net Rent vs Year", xlab="Year", ylab="Net Rent (€)", pch=19, col="purple")
plot(rent99$yearc, rent99$rentsqm, main="Rent per sqm vs Year", xlab="Year", ylab="Rent/sqm (€)", pch=19, col="orange")
```

### (c) Average and SD Plot

```{r}
rent_summary <- rent99 %>%
group_by(area) %>%
summarise(avg_rent = mean(rent), sd_rent = sd(rent),
avg_rentsqm = mean(rentsqm), sd_rentsqm = sd(rentsqm))

plot(rent_summary$area, rent_summary$avg_rent, type="l",
main="Average Net Rent vs Area", xlab="Area", ylab="Average Rent")
lines(rent_summary$area, rent_summary$avg_rent + rent_summary$sd_rent, lty=2)
lines(rent_summary$area, rent_summary$avg_rent - rent_summary$sd_rent, lty=2)
```

### (d) Boxplot and Density by Location

```{r}
boxplot(rentsqm ~ location, data=rent99,
main="Net Rent per sqm by Location",
xlab="Location", ylab="Rent per sqm (€)", col=c("skyblue","lightgreen","lightpink"))

plot(density(rent99$rentsqm), main="Kernel Density: Net Rent per sqm", col="red", lwd=2)
```

## Task 3: Fuel Consumption

```{r}
install.packages("alr4")
library(alr4)
data(fuel2001)
fuel2001 <- data.frame(fuel2001)
```

### (a) Create new variables

```{r}
fuel2001$Fuel <- 1000 * fuel2001$FuelC / fuel2001$Pop
fuel2001$Dlic <- 1000 * fuel2001$Drivers / fuel2001$Pop
fuel2001$logMiles <- log(fuel2001$Miles)
```

### (b) Summary and Correlation Plot

```{r}
summary(fuel2001)
pairs(fuel2001[, c("Fuel", "Dlic", "Income", "logMiles", "Tax")], main="Correlation Plot")
```

# SECTION 2: nassCDS DATA ANALYSIS

```{r}
install.packages("DAAG")
library(DAAG)
data(nassCDS)
```

## Question 1: Seatbelt Use and Mortality

### (1). How many indiv used seatbelts

```{r}
sum(nassCDS$seatbelt == "belted", na.rm=TRUE)
```

### (2) table of seatbelt usage vs accident outcome

```{r}
table_seat <- table(nassCDS$seatbelt, nassCDS$dead)
table_seat
```

### (3) Proportion test

```{r}
test_proportion <- function(tab){
  p1 <- tab[1,2]/sum(tab[1,])
  p2 <- tab[2,2]/sum(tab[2,])
  p <- (tab[1,2]+tab[2,2])/sum(tab)
  se <- sqrt(p*(1-p)*(1/sum(tab[1,])+1/sum(tab[2,])))
  z <- (p1 - p2)/se
  pval <- 2*pnorm(-abs(z))
  return(data.frame(Z_statistic=z, P_value=pval))
}
test_proportion(table_seat)
```

### (4) Visualization

```{r}
barplot(table_seat, beside=TRUE, col=c("skyblue","salmon"),
main="Seatbelt Usage vs Accident Outcome", ylab="Count")
```

## Question 2: Age of Occupants and Accident Outcome

```{r}
tapply(nassCDS$ageOFocc, nassCDS$dead, mean, na.rm=TRUE)
tapply(nassCDS$ageOFocc, nassCDS$dead, sd, na.rm=TRUE)

boxplot(ageOFocc ~ dead, data=nassCDS, main="Occupant Age by Outcome",
xlab="Outcome", ylab="Age", col=c("orange","lightblue"))
stripchart(ageOFocc ~ dead, data=nassCDS, vertical=TRUE, add=TRUE, pch=16, col="blue")

alive <- nassCDS$ageOFocc[nassCDS$dead=="alive"]
dead  <- nassCDS$ageOFocc[nassCDS$dead=="dead"]
t.test(alive, dead, var.equal=FALSE)
```

### (1) mean and standard deviation

```{r}
# Load the nassCDS dataset
data(nassCDS, package = "DAAG")

# Check the structure of the dataset
str(nassCDS)

# Look at the variables we need
head(nassCDS[, c("dead", "ageOFocc")])
```

```{r}
# mean and standard deviation of age by accident outcome
age_stats <- nassCDS %>%
  group_by(dead) %>%
  summarise(
    mean_age = mean(ageOFocc, na.rm = TRUE),
    sd_age = sd(ageOFocc, na.rm = TRUE),
    n = n()
  )

print(age_stats)
```

### (2) Visualize the distribution of the occupants’ age by accident outcome with data points

```{r}
# Create boxplot with data points
ggplot(nassCDS, aes(x = dead, y = ageOFocc, fill = dead)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +
  geom_jitter(width = 0.2, alpha = 0.3, size = 0.8) +
  labs(title = "Distribution of Occupant Age by Accident Outcome",
       x = "Accident Outcome",
       y = "Age of Occupant") +
  theme_minimal() +
  scale_fill_manual(values = c("alive" = "lightblue", "dead" = "lightcoral"))
```

The boxplot shows the distribution of ages for both groups (alive and dead) with individual data points overlaid. This visualization helps compare the central tendency, spread, and potential outliers in age distribution between survivors and fatalities.

### (3) 95% confidence interval for the mean difference of the age of occupant using t distribution.

```{r}
# Calculate 95% confidence interval for mean age difference using t-distribution

# Extract ages for each group
age_alive <- nassCDS$ageOFocc[nassCDS$dead == "alive"]
age_dead <- nassCDS$ageOFocc[nassCDS$dead == "dead"]

# Perform t-test to get confidence interval
t_test_result <- t.test(age_dead, age_alive, conf.level = 0.95)

# Extract the confidence interval
ci_lower <- t_test_result$conf.int[1]
ci_upper <- t_test_result$conf.int[2]
mean_diff <- t_test_result$estimate[1] - t_test_result$estimate[2]

cat("Mean age difference (dead - alive):", round(mean_diff, 2), "\n")
cat("95% Confidence Interval: [", round(ci_lower, 2), ",", round(ci_upper, 2), "]\n")
cat("t-statistic:", round(t_test_result$statistic, 2), "\n")
cat("p-value:", format.pval(t_test_result$p.value), "\n")
```

Description:

The 95% confidence interval for the mean difference in age between occupants who died and those who survived is **\[lower bound, upper bound\]**. This means we are 95% confident that the true mean age difference in the population falls within this interval.

## Question 3: Sex, Age, and Safety Devices

### (1)

```{r}
boxplot(ageOFocc ~ sex, data=nassCDS, main="Occupant Age by Sex", col=c("pink","lightblue"))
```

### (2)

```{r}
sum(nassCDS$ageOFocc > 50 & nassCDS$dead=="alive", na.rm=TRUE)
```

### (3)

```{r}
nassCDS$AgeOFocc_class <- ifelse(nassCDS$ageOFocc > 50, 1, 0)
```

### (4-7)

```{r}
nassCDS_o50 <- nassCDS %>%
filter(ageOFocc > 50) %>%
select(dead, airbag, weight, injSeverity) %>%
na.omit()

dim(nassCDS_o50)

barplot(table(nassCDS_o50$dead, nassCDS_o50$airbag),
beside=TRUE, col=c("skyblue","tomato"),
main="Airbag vs Outcome (Age > 50)", ylab="Count")

barplot(table(nassCDS_o50$injSeverity, nassCDS_o50$airbag),
beside=TRUE, col=c("lightgreen","pink"),
main="Airbag vs Injury Severity (Age > 50)", ylab="Count")
```

## Question 4: Summary Function for Fatal Accidents

```{r}
nass_analysis <- function(data){
  d <- subset(data, dead=="dead")
  pct_dead <- 100 * nrow(d) / nrow(data)
  pct_male <- 100 * sum(d$sex=="male", na.rm=TRUE)/nrow(d)
  pct_female <- 100 * sum(d$sex=="female", na.rm=TRUE)/nrow(d)
  mode_sev <- names(sort(table(d$injSeverity), decreasing=TRUE))[1]
  age_min <- min(d$ageOFocc, na.rm=TRUE)
  age_max <- max(d$ageOFocc, na.rm=TRUE)
  table_out <- data.frame(pct_dead, pct_male, pct_female, mode_sev, age_min, age_max)
  hist(d$injSeverity, main="Injury Severity among Deaths", xlab="Injury Severity", col="lightblue")
  return(table_out)
}
nass_analysis(nassCDS)
```

### (1) which of the accident outcome is “dead”?

```{r}
fatal_cases <- nassCDS %>% filter(dead == "dead")

# Check the result
cat("Total observations in original dataset:", nrow(nassCDS), "\n")
cat("Fatal cases found:", nrow(fatal_cases), "\n")
cat("Percentage of fatal cases:", round(nrow(fatal_cases)/nrow(nassCDS)*100, 2), "%\n")

# Preview the fatal cases
head(fatal_cases)
```

This task filters the dataset to include only cases where the occupant died

### (2) The percentage of deaths

```{r}
# 4.2 Calculate percentage of deaths out of the overall number of observations
total_observations <- nrow(nassCDS)
fatal_count <- nrow(fatal_cases)
death_percentage <- (fatal_count / total_observations) * 100

cat("Overall death statistics:\n")
cat("Total observations:", total_observations, "\n")
cat("Number of deaths:", fatal_count, "\n")
cat("Percentage of deaths:", round(death_percentage, 2), "%\n")
```

### (3) Calculate gender percentages among fatalities

```{r}
# 4.3 Calculate the percentages of females and males among the occupants who died
gender_breakdown <- fatal_cases %>%
  count(sex) %>%
  mutate(percentage = (n / fatal_count) * 100)

print("Gender distribution among fatalities:")
print(gender_breakdown)

# Extract specific percentages
female_pct <- gender_breakdown$percentage[gender_breakdown$sex == "f"]
male_pct <- gender_breakdown$percentage[gender_breakdown$sex == "m"]

cat("\nDetailed breakdown:\n")
cat("Female fatalities:", ifelse(length(female_pct) > 0, round(female_pct, 2), 0), "%\n")
cat("Male fatalities:", ifelse(length(male_pct) > 0, round(male_pct, 2), 0), "%\n")
```

### (4) Find most frequent injury severity

```{r}
# 4 Show the most frequent severity of their injuries
severity_analysis <- fatal_cases %>%
  count(injSeverity) %>%
  arrange(desc(n))  # Sort by frequency in descending order

print("Injury severity frequency among fatalities:")
print(severity_analysis)

most_frequent_severity <- severity_analysis$injSeverity[1]
most_frequent_count <- severity_analysis$n[1]

cat("\nMost frequent injury severity:", most_frequent_severity, "\n")
cat("Number of cases with this severity:", most_frequent_count, "\n")
cat("This represents", round(most_frequent_count/fatal_count*100, 2), "% of all fatalities\n")
```

This identifies the most common injury severity level among those who died. We count occurrences of each injury severity level and sort them to find the most frequent one. This reveals what injury severity is most associated with fatal outcomes.

### (5) Calculate age range of fatalities

```{r}
# 4.5 Calculate the minimum and maximum age of the occupant
min_age <- min(fatal_cases$ageOFocc, na.rm = TRUE)
max_age <- max(fatal_cases$ageOFocc, na.rm = TRUE)

cat("Age range:", max_age - min_age, "years\n")
```

### (6) Create injury severity vs age visualization

```{r}
# histogram with severity of injuries on x-axis and occupant's age on y-axis
ggplot(fatal_cases, aes(x = factor(injSeverity), y = ageOFocc)) +
  geom_boxplot(aes(fill = factor(injSeverity)), alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1, color = "darkred") +
  labs(title = "Relationship Between Injury Severity and Occupant Age in Fatal Accidents",
       subtitle = paste("Analysis of", fatal_count, "fatal cases"),
       x = "Injury Severity Level",
       y = "Occupant Age (years)",
       caption = "Each point represents one fatal case") +
  theme_minimal() +
  theme(legend.position = "none") +
  stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "blue")
```

This creates a visualization showing how age distributes across different injury severity levels.

### (7) Complete SINGLE-for-all function

```{r}
# 4.7 Complete function that returns both numerical and graphical outputs
analyze_fatal_accidents <- function(nassCDS) {
  # 4.1 - Filter fatal cases
  fatal_cases <- nassCDS %>% filter(dead == "dead")
  
  # 4.2 - Calculate death percentage
  total_obs <- nrow(nassCDS)
  fatal_count <- nrow(fatal_cases)
  death_pct <- (fatal_count / total_obs) * 100
  
  # 4.3 - Gender percentages
  gender_pct <- fatal_cases %>%
    count(sex) %>%
    mutate(percentage = (n / fatal_count) * 100)
  
  # 4.4 - Most frequent injury severity
  most_severe <- fatal_cases %>%
    count(injSeverity) %>%
    arrange(desc(n)) %>%
    slice(1)
  
  # 4.5 - Age range
  min_age <- min(fatal_cases$ageOFocc, na.rm = TRUE)
  max_age <- max(fatal_cases$ageOFocc, na.rm = TRUE)
  
  # Create numerical output table
  numerical_output <- data.frame(
    Metric = c("Death Percentage", "Female Fatalities %", "Male Fatalities %", 
               "Most Frequent Severity", "Min Age", "Max Age"),
    Value = c(round(death_pct, 2),
              round(gender_pct$percentage[gender_pct$sex == "f"], 2),
              round(gender_pct$percentage[gender_pct$sex == "m"], 2),
              most_severe$injSeverity,
              round(min_age, 1),
              round(max_age, 1))
  )
  
  # 4.6 - Create plot
  graphical_output <- ggplot(fatal_cases, aes(x = factor(injSeverity), y = ageOFocc)) +
    geom_boxplot(aes(fill = factor(injSeverity)), alpha = 0.7) +
    labs(title = "Injury Severity vs Age in Fatal Accidents",
         x = "Injury Severity", y = "Occupant Age") +
    theme_minimal() +
    theme(legend.position = "none")
  
  return(list(numerical = numerical_output, plot = graphical_output))
}

# Execute the complete function
results <- analyze_fatal_accidents(nassCDS)
```

```{r}
print(results$numerical)
```

```{r}
print(results$plot)
```

## Question 5: Seatbelt Users Summary

```{r}
seatbelt_users <- nassCDS[nassCDS$seatbelt=="belted", ]
nrow(seatbelt_users)
table(seatbelt_users$dead)
table(seatbelt_users$dead, seatbelt_users$occRole)

seatbelt_users <- seatbelt_users[order(seatbelt_users$injSeverity, seatbelt_users$ageOFocc), ]
head(seatbelt_users[order(-seatbelt_users$weight), ], 25)
```

### (1) New df containing only occupants who used seatbel

```{r}
# Create a new data frame which contains only occupants who used seatbelt
seatbelt_users <- nassCDS %>% filter(seatbelt == "belted")

# Check the result
cat("Created new data frame: seatbelt_users\n")
cat("Dimensions:", dim(seatbelt_users), "(rows × columns)\n")
cat("First few rows:\n")
head(seatbelt_users)
```

### (2) How many occupants used seatbelt ?

```{r}
total_seatbelt_users <- nrow(seatbelt_users)

cat("Occupants who used seatbelt:", total_seatbelt_users, "\n")
```

### (3) Survival outcomes among seatbelt users

```{r}
# Among seatbelt users, how many died and how many survived?
survival_breakdown <- seatbelt_users %>%
  count(dead) %>%
  mutate(percentage = (n / total_seatbelt_users) * 100)

# Calculate fatality rate
fatalities <- survival_breakdown$n[survival_breakdown$dead == "dead"]
survivors <- survival_breakdown$n[survival_breakdown$dead == "alive"]

cat(
  "Seatbelt users who survived:", 
  survivors,
  "(", round(survivors/total_seatbelt_users*100, 2), 
  "%)\n"
)
cat(
  "Seatbelt users who died:", 
  fatalities, 
  "(", round(fatalities/total_seatbelt_users*100, 2), 
  "%)\n"
)
```

### (4) Role analysis among seatbelt users

```{r}
# Analyze drivers vs passengers among different outcomes
role_analysis <- seatbelt_users %>%
  group_by(dead, occRole) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(dead) %>%
  mutate(percentage = (count / sum(count)) * 100)

cat("Role distribution among seatbelt users by outcome:\n")
print(role_analysis)

# Specific answers for the question
drivers_died <- seatbelt_users %>%
  filter(dead == "dead" & occRole == "driver") %>%
  nrow()

passengers_survived <- seatbelt_users %>%
  filter(dead == "alive" & occRole == "passenger") %>%
  nrow()

cat("\nSpecific counts requested:\n")
cat("Drivers among seatbelt users who died:", drivers_died, "\n")
cat("Passengers among seatbelt users who survived:", passengers_survived, "\n")

# Additional insight: compare role distribution
cat("\nAdditional insight - Role distribution:\n")
role_summary <- seatbelt_users %>% count(occRole)
print(role_summary)
```

### (5) Sort by injury severity and age

```{r}
# Sort the data frame according to injury severity and occupant age
seatbelt_sorted <- seatbelt_users %>%
  arrange(desc(injSeverity), desc(ageOFocc))

cat("Data frame sorted by injury severity (descending) and age (descending)\n")
cat("First 10 rows of sorted data:\n")
print(seatbelt_sorted[1:10, c("injSeverity", "ageOFocc", "dead", "occRole", "weight")])

# Alternative: ascending order for age
seatbelt_sorted_alt <- seatbelt_users %>%
  arrange(desc(injSeverity), ageOFocc)

cat("\nAlternative: Sorted by injury severity (desc) and age (asc)\n")
cat("First 10 rows:\n")
print(seatbelt_sorted_alt[1:10, c("injSeverity", "ageOFocc", "dead", "occRole", "weight")])

# Show range of injury severity
cat("\nInjury severity range in seatbelt users:\n")
cat("Min severity:", min(seatbelt_users$injSeverity, na.rm = TRUE), "\n")
cat("Max severity:", max(seatbelt_users$injSeverity, na.rm = TRUE), "\n")
cat("Mean severity:", round(mean(seatbelt_users$injSeverity, na.rm = TRUE), 2), "\n")
```

This sorts the seatbelt users dataframe first by injury severity (most severe first) and then by age (oldest first within each severity level)

### (6) Top 25 occupants by weight

```{r}
# Print the 25 occupants with the highest weight
top_25_weight <- seatbelt_users %>%
  arrange(desc(weight)) %>%
  head(25)

cat("25 seatbelt users with highest weight:\n")
print(top_25_weight[, c("weight", "ageOFocc", "dead", "injSeverity", "occRole", "sex")])
```

## Question 6: Age, Seatbelt, and Airbag Relationship

```{r}
par(mfrow=c(1,2))
with(nassCDS, {
boxplot(ageOFocc ~ injSeverity + seatbelt,
main="Age by Injury Severity (Seatbelt)", col=c("skyblue","lightgreen"))
boxplot(ageOFocc ~ injSeverity + airbag,
main="Age by Injury Severity (Airbag)", col=c("pink","lightyellow"))
})

```
